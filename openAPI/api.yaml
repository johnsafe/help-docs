openapi: 3.0.0
servers:
  - url: https://api.atomgit.com
    description: prod
  - url: https://test-api.atomgit.com
    description: test
info:
  description: |
    AtomGit 提供了REST API,您可以使用 Git CLI、curl、官方 Octokit 库和第三方库与此API进行交互。

    ## API 版本
    每当您向 REST API 发出请求时，您都必须指定要使用的 REST API 版本，您应该使用X-Api-Version标头来指定 API 版本。例如：
    ```
    $ curl --header "X-Api-Version:2023-02-21" https://api.atomgit.com/user/info
    ```
    没有标头的请求X-Api-Version将默认使用该2023-02-21版本。
    如果您指定不再受支持的 API 版本，您将收到400错误消息。
    ## token 验证
    AtomGit提供的REST API支持Oauth2令牌和私人令牌两种验证方式：
    1. OAuth2令牌（在标头中发送）
    ```
      $ curl -H "Authorization: Bearer OAUTH-TOKEN" https://api.atomgit.com
    ```
    2. 私人令牌令牌 （在标头中发送）
    ```
      $ curl -H "Authorization: Bearer PERSONAL-TOKEN" https://api.atomgit.com
    ```

  version: 2023-02-21
  title: 关于AtomGit API
  termsOfService: "https://api.atomgit.com"
  contact:
    name: API Support
    email: lish@csdn.net
    url: https://github.com/Redocly/redoc
  x-logo:
    url: "https://file.atomgit.com/uploads/assets/logo-footer.png"
    altText: AtomGit logo
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: "https://github.com/Rebilly/generator-openapi-repo"
tags:
  - name: user
    description: Operations about user
    x-displayName: 用户账号
x-tagGroups:
  - name: User Management
    tags:
      - user
paths:
  # /user:
  #   post:
  #     tags:
  #       - user
  #     summary: Create user
  #     description: This can only be done by the logged in user.
  #     operationId: createUser
  #     responses:
  #       default:
  #         description: successful operation
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/User"
  #       description: Created user object
  #       required: true
  # 获取用户个人信息
  /user/info:
    get:
      tags:
        - user
      summary: 获取用户个人信息
      description: 获取用户个人信息
      operationId: getTheAuthenticatedUser
      parameters:
        - name: Authorization
          in: header
          description: "Oauth2 token"
          required: true
      responses:
        401:
          description: 'token不合法、请检查token是否正确'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidToken"
            application/xml:
              schema:
                $ref: "#/components/schemas/InvalidToken"
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  # 更新用户个人信息
  # /user:
  #   patch:
  #     tags:
  #       - user
  #     summary: Update the authenticated user
  #     description: This can only be done by the logged in userinfo.
  #     operationId: updateTheAuthenticatedUser
  #     parameters:
  #       - name: Authorization
  #         in: header
  #         description: "The Oauth2 token"
  #         required: true
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/UpdateAuthenticatedUserDTO"
  #       description: update user object
  #       required: true
  #     responses:
  #       401:
  #         description: 'Invalid token, please provide correct token'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/InvalidToken"
  #           application/xml:
  #             schema:
  #               $ref: "#/components/schemas/InvalidToken"
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/User"
  #           application/xml:
  #             schema:
  #               $ref: "#/components/schemas/User"
  #       400:
  #         description: paramter error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ParamterError"
  #           application/xml:
  #             schema:
  #               $ref: "#/components/schemas/ParamterError"
  # 根据用户名查询用户信息
  /users/{username}:
    get:
      tags:
        - user
      summary: 根据用户名查询用户信息
      description: 根据用户名查询用户信息
      operationId: getUserByUsername
      parameters:
        - name: Authorization
          in: header
          description: "Oauth2 token"
          required: true
        - name: username
          in: path
          description: "用户名"
          required: true
      responses:
        401:
          description: 'token不合法、请检查token是否正确'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidToken"
            application/xml:
              schema:
                $ref: "#/components/schemas/InvalidToken"
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"     
 # 获取当前用户的邮箱列表
  /user/emails:
    get:
      tags:
        - user
      summary: 获取当前用户的邮箱列表
      description: 获取当前用户的邮箱列表
      operationId: listEmail
      parameters:
        - name: Authorization
          in: header
          description: "Oauth2 token"
          required: true
      responses:
        401:
          description: 'token不合法、请检查token是否正确'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidToken"
            application/xml:
              schema:
                $ref: "#/components/schemas/InvalidToken"
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserEmailVO"
            application/xml:
              schema:
                $ref: "#/components/schemas/UserEmailVO"     
#  # 获取当前用户的粉丝列表
#   /user/followers:
#     get:
#       tags:
#         - user
#       summary: List email addresses for the authenticated user
#       description: List email addresses for the authenticated user
#       operationId: listEmail
#       parameters:
#         - name: page
#           in: param
#           description: "the page number(default 1)"
#           required: false
#       parameters:
#         - name: per_page
#           in: param
#           description: "the page number(default 30,max 100)"
#           required: false
#       responses:
#         401:
#           description: 'Invalid token, please provide correct token'
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/InvalidToken"
#             application/xml:
#               schema:
#                 $ref: "#/components/schemas/InvalidToken"
#         200:
#           description: successful operation
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/UserEmailVO"
#             application/xml:
#               schema:
#                 $ref: "#/components/schemas/UserEmailVO"     
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Id:
      type: integer
      format: int64
      readOnly: true
    Tag:
      type: object
      properties:
        id:
          description: Tag ID
          allOf:
            - $ref: "#/components/schemas/Id"
        name:
          description: Tag name
          type: string
          minLength: 1
      xml:
        name: Tag
    ParamterError:
      type: object
      properties:
        cause:
          description: error cause
          type: string
          example: MESSAGE.PARAMETER_ERROR
        error_code:
          description: PARAMETER_ERROR
          type: string
          example: error code
        error_message:
          description: PARAMETER_ERROR
          type: string
          example: 用户昵称不合法（长度不能小于1且不能大于20个字符）
        trace_id:
          description:  trace id   
          type: string
          example: trace_id   
        code:
          description: response code
          type: Integer
          example: 1000      
    InvalidToken:
      type: object
      properties:
        error:
          description: 错误名称
          type: string
          example: invalid_token
        error_description:
          description: 错误描述
          type: string
          example: Invalid token, please provide correct token
    UpdateAuthenticatedUserDTO:
      type: object
      properties:
        name:
          description: The current user's nickname is between 1 and 20 characters in length
          type: string
          example: 这就是我的昵称
        blog:
          description: The blog address of the current user is between 1 and 100 characters
          type: string
          example: https://youboke.com
        company:
          description: The company name of the current user is between 1 and 50 characters
          type: string
          example: atom
        location:
          description: The current user's location is between 1 and 20 characters
          type: string
          example: beijing
        bio:
          description: The current user's profile is between 1 and 200 characters
          type: string
          example: hello i am putianyang
    UserEmailVO:
      type: object
      properties:
        email:
          description: 邮箱
          type: string
          example: 2xas@qq.com
        verified:
          description: 是否经过验证
          type: boolean
          example: false
        visibility:
          description: 邮箱是否公开(public为公开、 private为私有)
          type: string
          example: public
    User:
      type: object
      properties:
        login:
          description: 用户名
          type: string
          example: mrpuatomgit
        id:
          description: 用户id
          type: string
          example: 63db126c0566d2f7d2c9498c
        url:
          description: 根据获取用户名获取用户信息的接口路径
          type: string
          example: https://test-api.atomgit.com/users/mrpuatomgit
        name:
          description: 昵称
          type: string
          example: 这就是我的昵称
        company:
          description: 公司
          type: string
          example: atom
        blog:
          description: 博客
          type: string
          example: https://youboke.com
        location:
          description: 地址
          type: string
          example: beijing
        email:
          description: 邮箱
          type: string
          example: 2214882769@qq.com
        bio:
          description: 简介
          type: string
          example: hello i am putianyang
        avatar_url:
          description: 头像
          type: string
          example: https://atomgit.oss-cn-beijing.aliyuncs.com/uploads/user/1656318880150_5104.png
        html_url:
          description: 主页地址
          type: string
          example: https://test.atomgit.com/mrpuatomgit
        public_repos:
          description: 公开仓库数量
          type: Integer
          example: 3
        total_private_repos:
          description: 私有仓库总数量
          type: Integer
          example: 2
        owned_private_repos:
          description: 本人创建的私有仓库数量
          type: Integer
          example: 1
        created_at:
          description: 注册时间
          type: string
          example: '2023-02-02 09:31:24'
        updated_at:
          description: 更新时间
          example: '2023-02-02 09:31:24'
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
  examples:
    Order:
      value:
        quantity: 1
        shipDate: "2018-10-19T16:46:45Z"
        status: placed
        complete: false
