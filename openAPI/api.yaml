openapi: 3.0.0
servers:
  - url: https://api.atomgit.com
    description: prod
  - url: https://test-api.atomgit.com
    description: test
info:
  description: |
    AtomGit 提供了REST API,您可以使用 Git CLI、curl、官方 Octokit 库和第三方库与此API进行交互。

    ## API 版本
    每当您向 REST API 发出请求时，您都必须指定要使用的 REST API 版本，您应该使用X-Api-Version标头来指定 API 版本。例如：
    ```
    $ curl --header "X-Api-Version:2023-02-21" https://api.atomgit.com/user/info
    ```
    没有标头的请求X-Api-Version将默认使用该2023-02-21版本。
    如果您指定不再受支持的 API 版本，您将收到400错误消息。
    ## token 验证
    AtomGit提供的REST API支持Oauth2令牌和私人令牌两种验证方式：
    1. OAuth2令牌（在标头中发送）
    ```
      $ curl -H "Authorization: Bearer OAUTH-TOKEN" https://api.atomgit.com
    ```
    2. 私人令牌令牌 （在标头中发送）
    ```
      $ curl -H "Authorization: Bearer PERSONAL-TOKEN" https://api.atomgit.com
    ```

  version: 2023-02-21
  title: 关于AtomGit API
  termsOfService: "https://api.atomgit.com"
  contact:
    name: API Support
    email: lish@csdn.net
    url: https://github.com/Redocly/redoc
  x-logo:
    url: "https://file.atomgit.com/uploads/assets/logo-footer.png"
    altText: AtomGit logo
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: "https://github.com/Rebilly/generator-openapi-repo"
tags:
  - name: user
    description: Operations about user
    x-displayName: Users
  - name: org
    description: Operations about org
    x-displayName: Orgs
x-tagGroups:
  - name: User Management
    tags:
      - user
  - name: Org Management
    tags:
      - org
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
  # 获取用户个人信息
  /user/info:
    get:
      tags:
        - user
      summary: Get the authenticated user info
      description: This can only be done by the logged in userinfo.
      operationId: getTheAuthenticatedUser
      parameters:
        - name: Authorization
          in: header
          description: "The Oauth2 token"
          required: true
      responses:
        401:
          description: 'Invalid token, please provide correct token'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidToken"
            application/xml:
              schema:
                $ref: "#/components/schemas/InvalidToken"
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input list
      description: ""
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: OK
            application/xml:
              schema:
                type: string
              examples:
                response:
                  value: <Message> OK </Message>
            text/plain:
              examples:
                response:
                  value: OK
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /organizations:
    get:
      tags:
        - org
      summary: Lists all organizations
      description: "Lists all organizations, in the order that they were created on AtomGit."
      operationId: orgPageList
      parameters:
        - name: since
          in: query
          description: The number of results page num
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: The number of results per page (max 50).
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrgPage"
  "/orgs/{org}":
    get:
      tags:
        - org
      summary: organization detail
      description: "To get the organization detail info"
      operationId: orgDetail
      parameters:
        - name: org
          in: path
          description: "The organization name. The name is case sensitive. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgDetail"
        "404":
          description: org not found
    patch:
      tags:
        - org
      summary: update organization
      description: Enables an authenticated organization owner with the admin:org scope to update the organization's info.
      operationId: updateOrg
      parameters:
        - name: Authorization
          in: header
          description: "The Oauth2 Token or Personal Token"
          required: true
        - name: org
          in: path
          description: "The organization name. The name is case sensitive. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgDetail"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden,OAuth requests with insufficient scope receive a 403 Forbidden response.
        "404":
          description: org not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrg"
        description: Update org request body
        required: true
  /user/orgs:
    get:
      tags:
        - org
      summary: list organizations of user
      description: "List organizations for the authenticated user,this API requires at least user or read:org scope. OAuth requests with insufficient scope receive a 403 Forbidden response."
      operationId: userOrgPageList
      parameters:
        - name: Authorization
          in: header
          description: "The Oauth2 Token or Personal Token"
          required: true
        - name: since
          in: query
          description: The number of results page num
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: The number of results per page (max 50).
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserOrgPage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden,OAuth requests with insufficient scope receive a 403 Forbidden response.
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Id:
      type: integer
      format: int64
      readOnly: true
    Tag:
      type: object
      properties:
        id:
          description: Tag ID
          allOf:
            - $ref: "#/components/schemas/Id"
        name:
          description: Tag name
          type: string
          minLength: 1
      xml:
        name: Tag
    InvalidToken:
      type: object
      properties:
        error:
          description: error
          type: string
          example: invalid_token
        error_description:
          description: error description
          type: string
          example: Invalid token, please provide correct token
    User:
      type: object
      properties:
        login:
          description: this user name
          type: string
          example: mrpuatomgit
        id:
          description: this user id
          type: string
          example: 63db126c0566d2f7d2c9498c
        url:
          description: return personal information interface in json format
          type: string
          example: https://test-api.atomgit.com/users/mrpuatomgit
        name:
          description: User's nisckname
          type: string
          example: 这就是我的昵称
        company:
          description: User's company
          type: string
          example: atom
        blog:
          description: User's personal website or blog
          type: string
          example: https://youboke.com
        location:
          description: User's location
          type: string
          example: beijing
        email:
          description: User's email
          type: string
          example: 2214882769@qq.com
        bio:
          description: User's brief introduction
          type: string
          example: hello i am putianyang
        avatar_url:
          description: User's avatar
          type: string
          example: https://atomgit.oss-cn-beijing.aliyuncs.com/uploads/user/1656318880150_5104.png
        html_url:
          description: User's personal homepage
          type: string
          example: https://test.atomgit.com/mrpuatomgit
        public_repos:
          description: User's public repostory count
          type: Integer
          example: 3
        total_private_repos:
          description: User's private repostory count
          type: Integer
          example: 2
        owned_private_repos:
          description: User's self private repostory count
          type: Integer
          example: 1
        created_at:
          description: User's register time
          type: string
          example: '2023-02-02 09:31:24'
        updated_at:
          description: User's update personal information time
          example: '2023-02-02 09:31:24'
    OrgPage:
      type: object
      properties:
        login:
          description: The organization name
          type: string
          example: csdn
        id:
          description: The organization id
          type: string
          example: 62b59720cbcaeffdff0148ce
        url:
          description: The organization's information url
          type: string
          example: https://api.atomgit.com/orgs/csdn
        repos_url:
          description: The organization's repos url
          type: string
          example: https://api.atomgit.com/orgs/csdn/repos
        events_url:
          description: The organization's events url
          type: string
          example: https://api.atomgit.com/orgs/csdn/events
        hooks_url:
          description: The organization's hooks url
          type: string
          example:  https://api.atomgit.com/orgs/csdn/hooks
        issues_url:
          description: The organization's issue url
          type: string
          example: https://test-api.atomgit.com/orgs/csdn_test2/issues
        members_url:
          description: The organization's members url
          type: string
          example: https://api.atomgit.com/orgs/csdn/members/{/member}
        public_members_url:
          description: The organization's public members url
          type: string
          example: https://api.atomgit.com/orgs/csdn/public_members/{/member}
        avatar_url:
          description: The organization's avatar
          type: string
          example: https://atomgit.oss-cn-beijing.aliyuncs.com/uploads/org/1656042927816_7741.png
        description:
          description: The organization's description
          type: string
          example: csdn is a goog website
    OrgDetail:
      type: object
      properties:
        login:
          description: The organization name
          type: string
          example: csdn
        id:
          description: The organization id
          type: string
          example: 62b59720cbcaeffdff0148ce
        url:
          description: The organization's information url
          type: string
          example: https://api.atomgit.com/orgs/csdn
        repos_url:
          description: The organization's repos url
          type: string
          example: https://api.atomgit.com/orgs/csdn/repos
        events_url:
          description: The organization's events url
          type: string
          example: https://api.atomgit.com/orgs/csdn/events
        hooks_url:
          description: The organization's hooks url
          type: string
          example: https://api.atomgit.com/orgs/csdn/hooks
        issues_url:
          description: The organization's issue url
          type: string
          example: https://test-api.atomgit.com/orgs/csdn_test2/issues
        members_url:
          description: The organization's members url
          type: string
          example: https://api.atomgit.com/orgs/csdn/members/{/member}
        public_members_url:
          description: The organization's public members url
          type: string
          example: https://api.atomgit.com/orgs/csdn/public_members/{/member}
        avatar_url:
          description: The organization's avatar
          type: string
          example: https://atomgit.oss-cn-beijing.aliyuncs.com/uploads/org/1656042927816_7741.png
        description:
          description: The organization's description
          type: string
          example: csdn is a goog website
        name:
          description: The organization's name
          type: string
          example: 创新乐知
        company:
          description: The organization's website
          type: string
          example: http://www.csdn.net
        blog:
          description: The organization's blog
          type: string
          example: http://www.csdn.net
        location:
          description: The organization's location
          type: string
          example: 北京市朝阳区
        public_repos:
          description: The organization's public repos count
          type: Integer
          example: 1
        followers:
          description: The organization's followers
          type: Integer
          example: 10
        following:
          description: The organization's following
          type: Integer
          example: 0
        email:
          description: The organization's email
          type: string
          example: admin@csdn.net
        html_url:
          description: The organization's url on atomgit
          type: string
          example: https://atomgit.com/csdn
        created_at:
          description: The organization's created time
          type: string
          example: 2022-12-21T15:45:17+08:00
        updated_at:
          description: The organization's updated time
          type: string
          example: 2022-12-21T15:45:17+08:00
        type:
          description: The organization's type
          type: string
          example: Organization
    UpdateOrg:
      type: object
      properties:
        description:
          description: The organization's description
          type: string
          example: csdn is a goog website
        name:
          description: The organization's name
          type: string
          example: 创新乐知
        company:
          description: The organization's website
          type: string
          example: http://www.csdn.net
        location:
          description: The organization's location
          type: string
          example: 北京市朝阳区
    UserOrgPage:
      type: object
      properties:
        login:
          description: The organization name
          type: string
          example: csdn
        id:
          description: The organization id
          type: string
          example: 62b59720cbcaeffdff0148ce
        url:
          description: The organization's information url
          type: string
          example: https://api.atomgit.com/orgs/csdn
        repos_url:
          description: The organization's repos url
          type: string
          example: https://api.atomgit.com/orgs/csdn/repos
        events_url:
          description: The organization's events url
          type: string
          example: https://api.atomgit.com/orgs/csdn/events
        hooks_url:
          description: The organization's hooks url
          type: string
          example: https://api.atomgit.com/orgs/csdn/hooks
        issues_url:
          description: The organization's issue url
          type: string
          example: https://test-api.atomgit.com/orgs/csdn_test2/issues
        members_url:
          description: The organization's members url
          type: string
          example: https://api.atomgit.com/orgs/csdn/members/{/member}
        public_members_url:
          description: The organization's public members url
          type: string
          example: https://api.atomgit.com/orgs/csdn/public_members/{/member}
        avatar_url:
          description: The organization's avatar
          type: string
          example: https://atomgit.oss-cn-beijing.aliyuncs.com/uploads/org/1656042927816_7741.png
        description:
          description: The organization's description
          type: string
          example: csdn is a goog website
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
  examples:
    Order:
      value:
        quantity: 1
        shipDate: "2018-10-19T16:46:45Z"
        status: placed
        complete: false


