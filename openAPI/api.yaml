openapi: 3.0.0
servers:
  - url: https://api.atomgit.com
    description: prod
  - url: https://test-api.atomgit.com
    description: test
info:
  description: |
    AtomGit 提供了REST API,您可以使用 Git CLI、curl、官方 Octokit 库和第三方库与此API进行交互。

    ## API 版本
    每当您向 REST API 发出请求时，您都必须指定要使用的 REST API 版本，您应该使用X-Api-Version标头来指定 API 版本。例如：
    ```
    $ curl --header "X-Api-Version:2023-02-21" https://api.atomgit.com/user/info
    ```
    没有标头的请求X-Api-Version将默认使用该2023-02-21版本。
    如果您指定不再受支持的 API 版本，您将收到400错误消息。
    ## token 验证
    AtomGit提供的REST API支持Oauth2令牌和私人令牌两种验证方式：
    1. OAuth2令牌（在标头中发送）
    ```
      $ curl -H "Authorization: Bearer OAUTH-TOKEN" https://api.atomgit.com
    ```
    2. 私人令牌令牌 （在标头中发送）
    ```
      $ curl -H "Authorization: Bearer PERSONAL-TOKEN" https://api.atomgit.com
    ```

  version: 2023-02-21
  title: 关于AtomGit API
  termsOfService: "https://api.atomgit.com"
  contact:
    name: API Support
    email: lish@csdn.net
    url: https://github.com/Redocly/redoc
  x-logo:
    url: "https://file.atomgit.com/uploads/assets/logo-footer.png"
    altText: AtomGit logo
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
externalDocs:
  description: Find out how to create Github repo for your OpenAPI spec.
  url: "https://github.com/Rebilly/generator-openapi-repo"
tags:
  - name: user
    description: Operations about user
    x-displayName: Users
  - name: org
    description: Operations about org
    x-displayName: Orgs
x-tagGroups:
  - name: User Management
    tags:
      - user
  - name: Org Management
    tags:
      - org
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
  # 获取用户个人信息
  /user/info:
    get:
      tags:
        - user
      summary: Get the authenticated user info
      description: This can only be done by the logged in userinfo.
      operationId: getTheAuthenticatedUser
      parameters:
        - name: Authorization
          in: header
          description: "The Oauth2 token"
          required: true
      responses:
        401:
          description: 'Invalid token, please provide correct token'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidToken"
            application/xml:
              schema:
                $ref: "#/components/schemas/InvalidToken"
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input list
      description: ""
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: OK
            application/xml:
              schema:
                type: string
              examples:
                response:
                  value: <Message> OK </Message>
            text/plain:
              examples:
                response:
                  value: OK
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /organizations:
    get:
      tags:
        - org
      summary: Lists all organizations
      description: "Lists all organizations, in the order that they were created on AtomGit."
      operationId: orgPageList
      parameters:
        - name: since
          in: query
          description: The number of results page num
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: The number of results per page (max 50).
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrgPage"
  "/orgs/{org}":
    get:
      tags:
        - org
      summary: organization detail
      description: "To get the organization detail info"
      operationId: orgDetail
      parameters:
        - name: org
          in: path
          description: "the organization name. The name is case sensitive. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgDetail"
        "404":
          description: org not found
    patch:
      tags:
        - org
      summary: update organization
      description: Enables an authenticated organization owner with the admin:org scope to update the organization's info.
      operationId: updateOrg
      parameters:
        - name: Authorization
          in: header
          description: "The Oauth2 Token or Personal Token"
          required: true
        - name: org
          in: path
          description: "the organization name. The name is case sensitive. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrgDetail"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden,OAuth requests with insufficient scope receive a 403 Forbidden response.
        "404":
          description: org not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrg"
        description: Update org request body
        required: true
  /user/orgs:
    get:
      tags:
        - org
      summary: list organizations of user
      description: "List organizations for the authenticated user,this API requires at least user or read:org scope. OAuth requests with insufficient scope receive a 403 Forbidden response."
      operationId: userOrgPageList
      parameters:
        - name: Authorization
          in: header
          description: "The Oauth2 Token or Personal Token"
          required: true
        - name: since
          in: query
          description: The number of results page num
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: The number of results per page (max 50).
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserOrgPage"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden,OAuth requests with insufficient scope receive a 403 Forbidden response.
#  /users/{username}/orgs:
#    get:
#    tags:
#        - org
#      summary: list organizations by username
#      description: "List public organization memberships for the specified user."
#      operationId: userOrgByUserNamePageList
#      parameters:
#        - name: since
#          in: query
#          description: The number of results page num
#          required: false
#          schema:
#            type: integer
#        - name: per_page
#          in: query
#          description: The number of results per page (max 50).
#          required: false
#          schema:
#            type: integer
#      responses:
#        "200":
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/UserOrgPage"
#        "400":
#          description: username is not exist
  /orgs/{org}/invitations:
    post:
      tags:
        - org
      summary: Create an organization invitation
      description: "Invite people to an organization by using their AtomGit user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner."
      operationId: userOrgInvitation
      parameters:
        - name: Authorization
          in: header
          description: "The Oauth2 Token or Personal Token"
          required: true
        - name: org
          in: path
          description: "the organization name. The name is case sensitive. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserOrgInvition"
        "400":
          description: parameter is error
        "401":
          description: Unauthorized
        "403":
          description: Forbidden,the authenticated user is not organization owner.
      requestBody:
        content:
          application/json:
            schema:
              type: json
              properties:
                invitee_id:
                  description: Required unless you provide email. GitHub user ID for the person you are inviting.
                  type: string
                email:
                  description: Required unless you provide email. GitHub user ID for the person you are inviting.
                  type: string
                role:
                  description: The role for the new member:maintainer、developer、guest.
                  type: string
  /orgs/{org}/members:
    get:
      tags:
        - org
      summary: List organization members
      description: "List all users who are members of an organization."
      operationId: orgMembers
      parameters:
        - name: org
          in: path
          description: "the organization name. The name is case sensitive. "
          required: true
          schema:
            type: string
        - name: since
          in: query
          description: The number of results page num
          required: false
          schema:
            type: integer
        - name: per_page
          in: query
          description: The number of results per page (max 50).
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrgMember"
        "400":
          description: org is not exist
  /orgs/{org}/members/{username}:
    get:
      tags:
        - org
      summary: Check organization membership for a user
      description: "Check if a user is a member of the organization."
      operationId: orgMemberCheck
      parameters:
        - name: Authorization
          in: header
          description: "The Oauth2 Token or Personal Token"
          required: true
        - name: org
          in: path
          description: "the organization name. The name is case sensitive. "
          required: true
          schema:
            type: string
        - name: username
          in: path
          description: The handle for the AtomGit user account.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Response if requester is an organization member and user is a member
        "401":
          description: Response if requester is not an organization member
        "404":
          description: Not Found if requester is an organization member and user is not a member
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Id:
      type: integer
      format: int64
      readOnly: true
    Tag:
      type: object
      properties:
        id:
          description: Tag ID
          allOf:
            - $ref: "#/components/schemas/Id"
        name:
          description: Tag name
          type: string
          minLength: 1
      xml:
        name: Tag
    InvalidToken:
      type: object
      properties:
        error:
          description: error
          type: string
          example: invalid_token
        error_description:
          description: error description
          type: string
          example: Invalid token, please provide correct token
    User:
      type: object
      properties:
        login:
          description: this user name
          type: string
          example: mrpuatomgit
        id:
          description: this user id
          type: string
          example: 63db126c0566d2f7d2c9498c
        url:
          description: return personal information interface in json format
          type: string
          example: https://test-api.atomgit.com/users/mrpuatomgit
        name:
          description: User's nisckname
          type: string
          example: 这就是我的昵称
        company:
          description: User's company
          type: string
          example: atom
        blog:
          description: User's personal website or blog
          type: string
          example: https://youboke.com
        location:
          description: User's location
          type: string
          example: beijing
        email:
          description: User's email
          type: string
          example: 2214882769@qq.com
        bio:
          description: User's brief introduction
          type: string
          example: hello i am putianyang
        avatar_url:
          description: User's avatar
          type: string
          example: https://atomgit.oss-cn-beijing.aliyuncs.com/uploads/user/1656318880150_5104.png
        html_url:
          description: User's personal homepage
          type: string
          example: https://test.atomgit.com/mrpuatomgit
        public_repos:
          description: User's public repostory count
          type: Integer
          example: 3
        total_private_repos:
          description: User's private repostory count
          type: Integer
          example: 2
        owned_private_repos:
          description: User's self private repostory count
          type: Integer
          example: 1
        created_at:
          description: User's register time
          type: string
          example: '2023-02-02 09:31:24'
        updated_at:
          description: User's update personal information time
          example: '2023-02-02 09:31:24'
    OrgPage:
      type: object
      properties:
        login:
          description: the organization name
          type: string
          example: csdn
        id:
          description: the organization id
          type: string
          example: 62b59720cbcaeffdff0148ce
        url:
          description: the organization's information url
          type: string
          example: https://api.atomgit.com/orgs/csdn
        repos_url:
          description: the organization's repos url
          type: string
          example: https://api.atomgit.com/orgs/csdn/repos
        events_url:
          description: the organization's events url
          type: string
          example: https://api.atomgit.com/orgs/csdn/events
        hooks_url:
          description: the organization's hooks url
          type: string
          example:  https://api.atomgit.com/orgs/csdn/hooks
        issues_url:
          description: the organization's issue url
          type: string
          example: https://test-api.atomgit.com/orgs/csdn_test2/issues
        members_url:
          description: the organization's members url
          type: string
          example: https://api.atomgit.com/orgs/csdn/members/{/member}
        public_members_url:
          description: the organization's public members url
          type: string
          example: https://api.atomgit.com/orgs/csdn/public_members/{/member}
        avatar_url:
          description: the organization's avatar
          type: string
          example: https://atomgit.oss-cn-beijing.aliyuncs.com/uploads/org/1656042927816_7741.png
        description:
          description: the organization's description
          type: string
          example: csdn is a goog website
    OrgDetail:
      type: object
      properties:
        login:
          description: the organization name
          type: string
          example: csdn
        id:
          description: the organization id
          type: string
          example: 62b59720cbcaeffdff0148ce
        url:
          description: the organization's information url
          type: string
          example: https://api.atomgit.com/orgs/csdn
        repos_url:
          description: the organization's repos url
          type: string
          example: https://api.atomgit.com/orgs/csdn/repos
        events_url:
          description: the organization's events url
          type: string
          example: https://api.atomgit.com/orgs/csdn/events
        hooks_url:
          description: the organization's hooks url
          type: string
          example: https://api.atomgit.com/orgs/csdn/hooks
        issues_url:
          description: the organization's issue url
          type: string
          example: https://test-api.atomgit.com/orgs/csdn_test2/issues
        members_url:
          description: the organization's members url
          type: string
          example: https://api.atomgit.com/orgs/csdn/members/{/member}
        public_members_url:
          description: the organization's public members url
          type: string
          example: https://api.atomgit.com/orgs/csdn/public_members/{/member}
        avatar_url:
          description: the organization's avatar
          type: string
          example: https://atomgit.oss-cn-beijing.aliyuncs.com/uploads/org/1656042927816_7741.png
        description:
          description: the organization's description
          type: string
          example: csdn is a goog website
        name:
          description: the organization's name
          type: string
          example: 创新乐知
        company:
          description: the organization's website
          type: string
          example: http://www.csdn.net
        blog:
          description: the organization's blog
          type: string
          example: http://www.csdn.net
        location:
          description: the organization's location
          type: string
          example: 北京市朝阳区
        public_repos:
          description: the organization's public repos count
          type: Integer
          example: 1
        followers:
          description: the organization's followers
          type: Integer
          example: 10
        following:
          description: the organization's following
          type: Integer
          example: 0
        email:
          description: the organization's email
          type: string
          example: admin@csdn.net
        html_url:
          description: the organization's url on atomgit
          type: string
          example: https://atomgit.com/csdn
        created_at:
          description: the organization's created time
          type: string
          example: 2022-12-21T15:45:17+08:00
        updated_at:
          description: the organization's updated time
          type: string
          example: 2022-12-21T15:45:17+08:00
        type:
          description: the organization's type
          type: string
          example: Organization
    UpdateOrg:
      type: object
      properties:
        description:
          description: the organization's description
          type: string
          example: csdn is a goog website
        name:
          description: the organization's name
          type: string
          example: 创新乐知
        company:
          description: the organization's website
          type: string
          example: http://www.csdn.net
        location:
          description: the organization's location
          type: string
          example: 北京市朝阳区
    UserOrgPage:
      type: object
      properties:
        login:
          description: the organization name
          type: string
          example: csdn
        id:
          description: the organization id
          type: string
          example: 62b59720cbcaeffdff0148ce
        url:
          description: the organization's information url
          type: string
          example: https://api.atomgit.com/orgs/csdn
        repos_url:
          description: the organization's repos url
          type: string
          example: https://api.atomgit.com/orgs/csdn/repos
        events_url:
          description: the organization's events url
          type: string
          example: https://api.atomgit.com/orgs/csdn/events
        hooks_url:
          description: the organization's hooks url
          type: string
          example: https://api.atomgit.com/orgs/csdn/hooks
        issues_url:
          description: the organization's issue url
          type: string
          example: https://test-api.atomgit.com/orgs/csdn_test2/issues
        members_url:
          description: the organization's members url
          type: string
          example: https://api.atomgit.com/orgs/csdn/members/{/member}
        public_members_url:
          description: the organization's public members url
          type: string
          example: https://api.atomgit.com/orgs/csdn/public_members/{/member}
        avatar_url:
          description: the organization's avatar
          type: string
          example: https://atomgit.oss-cn-beijing.aliyuncs.com/uploads/org/1656042927816_7741.png
        description:
          description: the organization's description
          type: string
          example: csdn is a goog website
    UserOrgInvition:
      type: object
      properties:
        login:
          description: The authenticated user's username
          type: string
          example: csdn
        id:
          description: The authenticated user's id
          type: string
          example: 62b59720cbcaeffdff0148ce
        role:
          description:  The authenticated user's role
          type: string
          example: maintainer
        email:
          description:  The authenticated user's email
          type: string
          example: admin@csdn.net
        created_at:
          description: The authenticated user's created time
          type: string
          example: 2022-12-21T15:45:17+08:00
        inviter:
          description: The inviter's info
          type: object
          properties:
            login:
              description: inviter's username
              type: string
              example: mrpuatomgit
            id:
              description: inviter's id
              type: string
              example: 63db126c0566d2f7d2c9498c
            avatar_url:
              description: inviter's avatar
              type: string
              example: https://atomgit.oss-cn-beijing.aliyuncs.com/uploads/user/1656318880150_5104.png
            url:
              description: the inviter's url
              type: string
              example: https://test-api.atomgit.com/users/leige
            html_url:
              description: User's personal homepage
              type: string
              example: https://test.atomgit.com/mrpuatomgit
            followers_url:
              description: the inviter's followers url
              type: string
              example:
            followering_url:
              description: the inviter's followering url
              type: string
              example:
            gists_url:
              description: the inviter's gists url
              type: string
              example:
            starred_url:
              description: the inviter's starred url
              type: string
              example:
            subscriptions_url:
              description: the inviter's subscriptions url
              type: string
              example:
            organizations_url:
              description: the inviter's organizations url
              type: string
              example:
            repos_url:
              description: the inviter's repos url
              type: string
              example:
            events_url:
              description: the inviter's events url
              type: string
              example:
            received_events_url:
              description: the inviter's received events url
              type: string
              example:
            type:
              description: the inviter's user type
              type: string
              example: user
            site_admin:
              description: the inviter is a site_admin
              type: string
              example: false
    OrgMember:
      type: object
      properties:
        login:
          description: Org Member's username
          type: string
          example: mrpuatomgit
        id:
          description: Org Member's id
          type: string
          example: 63db126c0566d2f7d2c9498c
        avatar_url:
          description: Org Member's avatar
          type: string
          example: https://atomgit.oss-cn-beijing.aliyuncs.com/uploads/user/1656318880150_5104.png
        url:
          description: the org member's url
          type: string
          example: https://test-api.atomgit.com/users/leige
        html_url:
          description: Org Member's personal homepage
          type: string
          example: https://test.atomgit.com/mrpuatomgit
        followers_url:
          description: the org member's followers url
          type: string
          example:
        followering_url:
          description: the org member's followering url
          type: string
          example:
        gists_url:
          description: the org member's gists url
          type: string
          example:
        starred_url:
          description: the org member's starred url
          type: string
          example:
        subscriptions_url:
          description: the org member's subscriptions url
          type: string
          example:
        organizations_url:
          description: the org member's organizations url
          type: string
          example:
        repos_url:
          description: the org member's repos url
          type: string
          example:
        events_url:
          description: the org member's events url
          type: string
          example:
        received_events_url:
          description: the org member's received events url
          type: string
          example:
        type:
          description: the org member's user type
          type: string
          example: user
        site_admin:
          description: the org member's is a site_admin
          type: string
          example: false
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
  examples:
    Order:
      value:
        quantity: 1
        shipDate: "2018-10-19T16:46:45Z"
        status: placed
        complete: false


